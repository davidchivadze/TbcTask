// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TbcTask.Infrastructure.Store;

#nullable disable

namespace TbcTask.Infrastructure.Store.Migrations
{
    [DbContext(typeof(PersonDbContext))]
    partial class PersonDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("TbcTask.Domain.Models.Database.ConnectedPerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("PersonConnectionTypeID")
                        .HasColumnType("int");

                    b.Property<int>("PhysicalPersonID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonConnectionTypeID");

                    b.HasIndex("PhysicalPersonID");

                    b.ToTable("ConnectedPersons");
                });

            modelBuilder.Entity("TbcTask.Domain.Models.Database.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genders");
                });

            modelBuilder.Entity("TbcTask.Domain.Models.Database.PersonConnectionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PersonConnectionTypes");
                });

            modelBuilder.Entity("TbcTask.Domain.Models.Database.Phone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PhoneTypeID")
                        .HasColumnType("int");

                    b.Property<int>("PhysicalPersonID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PhoneTypeID");

                    b.HasIndex("PhysicalPersonID");

                    b.ToTable("Phones");
                });

            modelBuilder.Entity("TbcTask.Domain.Models.Database.PhoneType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PhoneTypes");
                });

            modelBuilder.Entity("TbcTask.Domain.Models.Database.PhysicalPerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("GenderID")
                        .HasColumnType("int");

                    b.Property<string>("ImageAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PrivateNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GenderID");

                    b.ToTable("PhysicalPersons");
                });

            modelBuilder.Entity("TbcTask.Domain.Models.Database.ConnectedPerson", b =>
                {
                    b.HasOne("TbcTask.Domain.Models.Database.PersonConnectionType", "PersonConnectionType")
                        .WithMany("ConnectedPerson")
                        .HasForeignKey("PersonConnectionTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TbcTask.Domain.Models.Database.PhysicalPerson", "PhysicalPerson")
                        .WithMany("ConnectedPersons")
                        .HasForeignKey("PhysicalPersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PersonConnectionType");

                    b.Navigation("PhysicalPerson");
                });

            modelBuilder.Entity("TbcTask.Domain.Models.Database.Phone", b =>
                {
                    b.HasOne("TbcTask.Domain.Models.Database.PhoneType", "PhoneType")
                        .WithMany("Phones")
                        .HasForeignKey("PhoneTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TbcTask.Domain.Models.Database.PhysicalPerson", "PhysicalPerson")
                        .WithMany("PhoneNumbers")
                        .HasForeignKey("PhysicalPersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PhoneType");

                    b.Navigation("PhysicalPerson");
                });

            modelBuilder.Entity("TbcTask.Domain.Models.Database.PhysicalPerson", b =>
                {
                    b.HasOne("TbcTask.Domain.Models.Database.Gender", "Gender")
                        .WithMany("PhysicalPersons")
                        .HasForeignKey("GenderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("TbcTask.Domain.Models.Database.Gender", b =>
                {
                    b.Navigation("PhysicalPersons");
                });

            modelBuilder.Entity("TbcTask.Domain.Models.Database.PersonConnectionType", b =>
                {
                    b.Navigation("ConnectedPerson");
                });

            modelBuilder.Entity("TbcTask.Domain.Models.Database.PhoneType", b =>
                {
                    b.Navigation("Phones");
                });

            modelBuilder.Entity("TbcTask.Domain.Models.Database.PhysicalPerson", b =>
                {
                    b.Navigation("ConnectedPersons");

                    b.Navigation("PhoneNumbers");
                });
#pragma warning restore 612, 618
        }
    }
}
